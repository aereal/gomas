package httputil

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

var testHeaderName = "generated-by"

func spyMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Add(testHeaderName, "spied")
		next.ServeHTTP(w, r)
	})
}

func alwaysOK(_ *http.Request) bool { return true }

func alwaysNG(_ *http.Request) bool { return false }

func buildPlain(baseURL string) (*http.Request, error) {
	return http.NewRequest(http.MethodGet, baseURL, nil)
}

func TestApplyIf(t *testing.T) {
	type args struct {
		cond func(r *http.Request) bool
		mw   Middleware
	}
	tests := []struct {
		name                string
		args                args
		buildRequest        func(baseURL string) (*http.Request, error)
		expectedGeneratedBy string
	}{
		{
			"ok",
			args{alwaysOK, spyMiddleware},
			buildPlain,
			"spied",
		},
		{
			"not applied",
			args{alwaysNG, spyMiddleware},
			buildPlain,
			"child",
		},
	}
	childHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Add(testHeaderName, "child")
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			h := ApplyIf(tt.args.cond, tt.args.mw)(childHandler)
			srv := httptest.NewUnstartedServer(h)
			defer srv.Close()
			srv.Start()
			req, err := tt.buildRequest(srv.URL)
			if err != nil {
				t.Fatal(err)
			}
			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				t.Fatal(err)
			}
			got := resp.Header.Get(testHeaderName)
			if got != tt.expectedGeneratedBy {
				t.Errorf("generated by:\n\tgot=%q\n\texpected=%q", got, tt.expectedGeneratedBy)
			}
		})
	}
}

func TestStack_empty(t *testing.T) {
	testHeaderValue := "child"
	childHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Add(testHeaderName, testHeaderValue)
	})
	mw := Stack()
	srv := httptest.NewUnstartedServer(mw(childHandler))
	defer srv.Close()
	srv.Start()
	req, err := buildPlain(srv.URL)
	if err != nil {
		t.Fatal(err)
	}
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		t.Fatal(err)
	}
	got := resp.Header.Get(testHeaderName)
	if got != testHeaderValue {
		t.Errorf("generated by:\n\tgot=%q\n\texpected=%q", got, testHeaderValue)
	}
}

func TestStack_multiple(t *testing.T) {
	childHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Add(testHeaderName, "child")
	})
	mw := Stack(createAppendHeaderValueMiddleware("b"), createAppendHeaderValueMiddleware("a"))
	srv := httptest.NewUnstartedServer(mw(childHandler))
	defer srv.Close()
	srv.Start()
	req, err := buildPlain(srv.URL)
	if err != nil {
		t.Fatal(err)
	}
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		t.Fatal(err)
	}
	got := strings.Join(resp.Header.Values(testHeaderName), "; ")
	expected := "a; b; child"
	if got != expected {
		t.Errorf("generated by:\n\tgot=%q\n\texpected=%q", got, expected)
	}
}

func createAppendHeaderValueMiddleware(value string) Middleware {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.Header().Add(testHeaderName, value)
			next.ServeHTTP(w, r)
		})
	}
}
